" Hugo O. Rivera's vim/neovim config
" Internet connection unneeded.

" Use Vim defaults instead of Vi's.
" Warning: keep this near the top of the config file.
set nocompatible

" Map semicolon to colon
:nmap ; :

" Foldcolumn on the right side (clickable).
set foldcolumn=2

" Close folds by default.
set foldlevel=0

" Do not fold by default.
" set nofoldenable

" Autowrite in all situations, except quiting.
set autowrite

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set t_Co=256

" Change dir to that of the current file
" Benefits:
"   - easier to navigate to nearby files
"   - gf works better (with some plugins)
" Alternative 1: set autochdir
" Alternative 2: nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" Alternative 3: autocmd BufReadPost,BufWinEnter * silent! lcd %:p:h
set autochdir
autocmd BufReadPost,BufWinEnter * silent! lcd %:p:h

" When searching, ignore case unless there's an uppercase letter in query
set ignorecase
set smartcase

" Spellcheck
" Use z= to get spelling suggestions
set spelllang=en_us,es_es,es_mx,fr,ru_ru

" C-x C-k to show dictionary words
set complete+=kspell

" Reload a file if it's changed by another process
set autoread

" Don't run modeline commands when opening files.
" This would read code in any file and run it!
set nomodeline

" No viminfo file
set viminfo=

" Keep 5 lines of history
set history=5

" Show line numbers
set number
set relativenumber

" Highlight searches
set hlsearch

if executable('/usr/local/bin/python')
  let g:python2_host_prog = '/usr/local/bin/python2'
  let g:python3_host_prog = '/usr/local/bin/python3'
end

if executable('/usr/bin/python')
  let g:python2_host_prog = '/usr/bin/python2'
  let g:python3_host_prog = '/usr/bin/python3'
end

" Neovim only: highlight replacements when running :s/ command
if has('nvim')
  set inccommand=nosplit
end

" Incremental search: search before hitting ENTER
set incsearch

" Nicer chars for visible whitespace mode
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+,space:.

" Unsets the 'last search pattern' register by hitting return
nnoremap <CR> :nohlsearch<CR><CR>

" Highlight column 79
set colorcolumn=79

" Save backups
set backup

" Keep swap files and backup files in a home folder
" Please run: mkdir -p ~/{.vim,.config/nvim,tmp}/{backup,swap,undo}
set directory=~/tmp/swap//,~/tmp//
set backupdir=~/tmp/backup//,~/tmp//
set undodir=~/tmp/undo//,~/tmp//

" Save backups with a timestamp and directory info
au BufWritePre * let &backupext = '%' . strftime('%m-%d-%H:%M')

" Set to UTF-8
set encoding=utf-8

" UTF 8
if v:lang =~ 'utf8$' || v:lang =~ 'UTF-8$'
   set fileencodings=ucs-bom,utf-8,latin1
endif

" Allow backspacing over everything in insert mode
set bs=indent,eol,start

" Backspace over everything
set backspace=2

" Show the cursor position all the time
set ruler

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ',a:blinkon0'

" Crosshairs
set cursorcolumn
set cursorline
" hi  CursorColumn cterm=reverse cterm=reverse gui=reverse
hi  CursorLine term=underline cterm=underline gui=underline

if has('nvim')
  let $VIMNAME='nvim'
else
  let $VIMNAME='vim'
endif

" Set terminal emulator window title
" vim name, filename, basename of git root (aka project name), shortened PWD, user@host
function! SetTitleString()
  let &titlestring =
        \ $VIMNAME
        \ . ' ' .
        \ system('projectname.sh')
        \ . ' ' .
        \ expand('%')
        \ . ' ' .
        \ system('trimdir.py', expand('%:p:h'))
        \ . ' ' .
        \ $USER . '@' . hostname()
        \ . ' ' .
        \ ' pid=' . system('echo $$')
endfunction

autocmd BufNewFile,BufRead,BufEnter * exe "call SetTitleString()"

if &term == 'screen'
  set t_ts=^[k
  set t_fs=^[\
endif
set title

" Indentation
set tabstop=2 shiftwidth=2 tabstop=2 expandtab

filetype plugin indent on

syntax on

" Python indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 softtabstop=4 shiftwidth=4 expandtab autoindent fileformat=unix

" ML indentation
au BufNewFile,BufRead *.ml
    \ set tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent fileformat=unix

" JavaScript indentation
au BufNewFile,BufRead *.js
    \ set tabstop=2 softtabstop=2 shiftwidth=2 expandtab autoindent fileformat=unix

" Plz no auto wrapping
set textwidth=0 wrapmargin=0

" Nicer netrw, the default file browser
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*

" Tab navigation like Vim:
nnoremap th  :tabfirst<CR>

nnoremap tk  :tabnext<CR>
nnoremap tj  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
nnoremap tn :tabnew<CR>
nnoremap to :tabonly<CR>

" Tab navigation like Firefox.
" TAB KEYS ARE HANDLED STRANGELY BY SOME TERMINAL LIBRARIES
" BEWARE THE CURSE! NO MORE TAB COMPLETE!
" inoremap <C-S-i> <Esc>:tabprevious<CR>i
" inoremap <C-i>   <Esc>:tabnext<CR>i

" Bindings for Darwin, but fancy
nnoremap <D-1> 1gt
nnoremap <D-2> 2gt
nnoremap <D-3> 3gt
nnoremap <D-4> 4gt
nnoremap <D-5> 5gt
nnoremap <D-6> 6gt
nnoremap <D-7> 7gt
nnoremap <D-8> 8gt
nnoremap <D-9> 9gt

" Bindings for normal machines
" for-loops are for n00bs
nnoremap <A-1> 1gt
nnoremap <A-2> 2gt
nnoremap <A-3> 3gt
nnoremap <A-4> 4gt
nnoremap <A-5> 5gt
nnoremap <A-6> 6gt
nnoremap <A-7> 7gt
nnoremap <A-8> 8gt
nnoremap <A-9> 9gt
nnoremap <C-1> 1gt
nnoremap <C-2> 2gt
nnoremap <C-3> 3gt
nnoremap <C-4> 4gt
nnoremap <C-5> 5gt
nnoremap <C-6> 6gt
nnoremap <C-7> 7gt
nnoremap <C-8> 8gt
nnoremap <C-9> 9gt
inoremap <C-1> <Esc>1gt<CR>i
inoremap <C-2> <Esc>2gt<CR>i
inoremap <C-3> <Esc>3gt<CR>i
inoremap <C-4> <Esc>4gt<CR>i
inoremap <C-5> <Esc>5gt<CR>i
inoremap <C-6> <Esc>6gt<CR>i
inoremap <C-7> <Esc>7gt<CR>i
inoremap <C-8> <Esc>8gt<CR>i
inoremap <C-9> <Esc>9gt<CR>i
inoremap <A-1> <Esc>1gt<CR>i
inoremap <A-2> <Esc>2gt<CR>i
inoremap <A-3> <Esc>3gt<CR>i
inoremap <A-4> <Esc>4gt<CR>i
inoremap <A-5> <Esc>5gt<CR>i
inoremap <A-6> <Esc>6gt<CR>i
inoremap <A-7> <Esc>7gt<CR>i
inoremap <A-8> <Esc>8gt<CR>i
inoremap <A-9> <Esc>9gt<CR>i

" Copy and paste with Ctrl-C and Ctrl-V
inoremap <C-v> <ESC>"*pa
vnoremap <C-c> "+y
nnoremap <C-c> "+y
cnoremap <C-c> "+y

" Enable mouse control in neovim for normal mode, visual mode, and insert mode
set mouse=nva

" <Left> and <Right> wrap around line breaks
set whichwrap+=<,>,[,]

" Keep cursor in center of screen, except when near start or end of file
set scrolloff=999
set wrapmargin=0
set textwidth=0

" Function names starting with a keyword (e.g. baseline-unit()) are not highlighted correctly by default.
autocmd FileType scss set iskeyword+=-

" Folds for CSS and SCSS syntax
autocmd BufRead,BufNewFile *.css,*.scss,*.less setlocal foldmethod=marker foldmarker={,}

" Options for gvim: remove toolbar
set guioptions-=T

" Set GUI Font
set guifont=MonoLisa\ Medium:h14

" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers

" Don't restore help windows
set sessionoptions-=help

" Avoid corrupting session files by not saving options and mappings
set sessionoptions-=options

" Use ESC key to escape terminal mode
tnoremap <Esc> <C-\><C-n>

" Shows syntax/highlight group under cursor
" Useful for debugging themes
" :call SynGroup()
function! SynGroup()
    let l:s = synID(line('.'), col('.'), 1)
    echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

" Italic keywords and types
hi Keyword cterm=italic gui=italic
hi Type cterm=italic gui=italic

hi String cterm=bold gui=bold

hi Statement cterm=italic gui=italic
hi Function cterm=italic gui=italic
hi Conditional cterm=italic gui=italic
hi Exception cterm=italic gui=italic
hi Include cterm=italic gui=italic

hi Except cterm=italic gui=italic

hi Identifier cterm=italic gui=italic
hi Special cterm=italic gui=italic

let g:neovide_cursor_vfx_mode = "railgun"

" Use bash instead of $SHELL.
set shell=/bin/bash

" Load bash configuration file
" My .bashrc detects if interactive mode is enabled before enabling any
" interactive shell features.
let $BASH_ENV = $HOME . "/.bash_vim"

" !makeanywhere format-fix-with-pyston PYFILES=%:p
" !ma test-unit

" Load project-specific local vim settings at $PWD/.vim.{custom,local}
" if filereadable('.vim.custom')
"     so .vim.custom
" endif

" if filereadable('.vimrc.local')
"     so .vimrc.local
" endif
