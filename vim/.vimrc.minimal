" use Vim defaults instead of Vi's
" warning: keep this near the top of the config file
set nocompatible

" autowrite in all situations, except quiting
set autowrite

if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

set t_Co=256

" use bash instead of $SHELL
set shell=/bin/bash

" change dir to that of the current file
" benefits:
"   - easier to navigate to nearby files
"   - gf works better (with some plugins)
" alternative 1: set autochdir
" alternative 2: nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>
" alternative 3: autocmd BufReadPost,BufWinEnter * silent! lcd %:p:h
set autochdir
autocmd BufReadPost,BufWinEnter * silent! lcd %:p:h

" when searching, ignore case unless there's an uppercase letter in query
set ignorecase
set smartcase

" map semicolon to colon
:nmap ; :

" spellcheck
set spell spelllang=en_us

" C-x C-k to show dictionary words
set complete+=kspell

" reload a file if it's changed by another process
set autoread

" don't run modeline commands when opening files
" this would read code in any file and run it!
set nomodeline

" no viminfo file
set viminfo=

" keep 5 lines of history
set history=5

" show line numbers
set number
set relativenumber

" easier to see color for folds
" hi Folded guibg=white guifg=black ctermbg=white ctermfg=black

" highlight searches
set hlsearch

let g:python2_host_prog = '/usr/local/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'

" neovim only: highlight replacements when running :s/ command
if has('nvim')
  set inccommand=nosplit
end

" incremental search: search before hitting ENTER
set incsearch

" nicer chars for visible whitespace mode
set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+

" unsets the 'last search pattern' register by hitting return
nnoremap <CR> :nohlsearch<CR><CR>

" highlight column 79
set colorcolumn=79

" save backups
set backup

" keep swap files and backup files in a home folder
" should run
" mkdir -p ~/{.vim,.config/nvim,tmp}/{backup,swap,undo}
set directory=~/tmp/swap//,~/tmp//
set backupdir=~/tmp/backup//,~/tmp//
set undodir=~/tmp/undo//,~/tmp//

" save backups with a timestamp and directory info
au BufWritePre * let &backupext = '%' . strftime('%m-%d-%H:%M')

set encoding=utf-8

" UTF 8
if v:lang =~ 'utf8$' || v:lang =~ 'UTF-8$'
   set fileencodings=ucs-bom,utf-8,latin1
endif

set bs=indent,eol,start	" allow backspacing over everything in insert mode
set ruler		" show the cursor position all the time

" Don't wake up system with blinking cursor:
" http://www.linuxpowertop.org/known.php
let &guicursor = &guicursor . ',a:blinkon0'

" crosshairs
" set cursorcolumn
" set cursorline
" " hi  CursorColumn cterm=reverse cterm=reverse gui=reverse
" hi  CursorLine term=underline cterm=underline gui=underline

" set terminal emulator window title
" filename, basename of git root or an extra space, shortened PWD, user@host
function! SetTitleString()
  let &titlestring = 'v ' .
  \ expand('%') . ' ' .
  \ system('basename $(git rev-parse --show-toplevel 2> /dev/null) ""') . ' ' .
  \ system('trimdir.py', expand('%:p:h')) . ' ' .
  \ $USER . '@' . hostname()
endfunction

autocmd BufNewFile,BufRead,BufEnter * exe "call SetTitleString()"

if &term == 'screen'
  set t_ts=^[k
  set t_fs=^[\
endif
set title

" indentation
set tabstop=2 shiftwidth=2 tabstop=2 expandtab

filetype plugin indent on

" Python indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4 softtabstop=4 shiftwidth=4 textwidth=79 expandtab autoindent fileformat=unix

" Personal indentation rules
au BufNewFile,BufRead *.ml
    \ set tabstop=2 softtabstop=2 shiftwidth=2 textwidth=80 expandtab autoindent fileformat=unix

au BufNewFile,BufRead *.js
    \ set tabstop=2 softtabstop=2 shiftwidth=2 textwidth=80 expandtab autoindent fileformat=unix

" nicer netrw (default file browser)
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1

set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*/node_modules/*

" do not fold by default
set nofoldenable

" vim-ish tab navigation
nnoremap th  :tabfirst<CR>

nnoremap tk  :tabnext<CR>
nnoremap tj  :tabprev<CR>
nnoremap tl  :tablast<CR>
nnoremap tt  :tabedit<Space>
nnoremap tm  :tabm<Space>
nnoremap td  :tabclose<CR>
nnoremap tn :tabnew<CR>

" Tab navigation like Firefox.
nnoremap <C-S-tab> :tabprevious<CR>
nnoremap <C-tab>   :tabnext<CR>
nnoremap <C-t>     :tabnew<CR>
inoremap <C-S-tab> <Esc>:tabprevious<CR>i
inoremap <C-tab>   <Esc>:tabnext<CR>i
inoremap <C-t>     <Esc>:tabnew<CR>


nnoremap <C-S-Tab> :tabprevious<CR>
nnoremap <C-Tab>   :tabnext<CR>
nnoremap <C-T>     :tabnew<CR>
inoremap <C-S-Tab> <Esc>:tabprevious<CR>i
inoremap <C-Tab>   <Esc>:tabnext<CR>i
inoremap <C-T>     <Esc>:tabnew<CR>

" Copy and paste with Ctrl-C and Ctrl-V
vmap <C-c> "+yi
vmap <C-x> "+c
vmap <C-v> c<ESC>"+p
imap <C-v> <C-r><C-o>+

" enable mouse control in neovim for normal mode, visual mode, and insert mode
set mouse=nva

" backspace over everything
set backspace=2

" <Left> and <Right> wrap around line breaks
set whichwrap+=<,>,[,]

" keep cursor in center of screen, except when near start or end of file
set scrolloff=999

set wrapmargin=0

set textwidth=0

" gvim options
set guioptions-=T  "remove toolbar

" Don't save hidden and unloaded buffers in sessions.
set sessionoptions-=buffers

" Don't restore help windows
set sessionoptions-=help

" Avoid corrupting session files by not saving options and mappings
set sessionoptions-=options

" Use ESC key to escape terminal mode
tnoremap <Esc> <C-\><C-n>

" load project-specific local vim settings at $PWD/.vim.{custom,local}
if filereadable('.vim.custom')
    so .vim.custom
endif

if filereadable('.vimrc.local')
    so .vimrc.local
endif
